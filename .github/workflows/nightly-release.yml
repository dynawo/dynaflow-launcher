name: Nightly Release

on:
  workflow_dispatch:
  schedule:
    - cron:  "0 2 * * 1-5"

jobs:
  fedora:
    name: Linux Fedora (Release, GCC, cxx11)
    runs-on: ubuntu-latest
    container: dynawo/dynawo-distribution-cxx11:latest
    strategy:
      fail-fast: false
    env:
      DYNAWO_VERSION: 1.5.0
      DYNAWO_VERSION_SHORT: 1.5
      DYNAFLOW_LAUNCHER_BUILD_TYPE: Release
      DYNAFLOW_LAUNCHER_PROCESSORS_USED: 2
      DYNAFLOW_LAUNCHER_FORCE_CXX11_ABI: "true"
      DYNAFLOW_LAUNCHER_LOCALE: "en_GB"
      DYNAFLOW_LAUNCHER_USE_DOXYGEN: "OFF"
      DYNAFLOW_LAUNCHER_BUILD_TESTS: "OFF"
      GH_API: ${{ github.api_url }}/repos/${{ github.repository }}
      GH_API_DYNAWO: ${{ github.api_url }}/repos/${{ github.repository_owner }}/dynawo
      GH_API_DYNAWO_ALGORITHMS: ${{ github.api_url }}/repos/${{ github.repository_owner }}/dynawo-algorithms
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CURL_JSON: 'curl --silent -H "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" --header "Content-Type": "application/json"'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Fetch Dynawo and Dynawo algorithms
        run: |
          source .github/workflows/tools.sh

          download_asset $GH_API_DYNAWO nightly-release Dynawo_headers_V${DYNAWO_VERSION}.zip $GITHUB_TOKEN
          download_asset $GH_API_DYNAWO_ALGORITHMS nightly-release DynawoAlgorithms_headers_V${DYNAWO_VERSION}.zip $GITHUB_TOKEN

      - name: Unzip Dynawo and Dynawo algorithms
        run: |
          unzip -qq "Dynawo_headers_V${DYNAWO_VERSION}.zip"
          unzip -qq "DynawoAlgorithms_headers_V${DYNAWO_VERSION}.zip"

      - name: Build
        run: |
          export DYNAWO_HOME=$(pwd)/dynawo
          export DYNAWO_ALGORITHMS_HOME=$(pwd)/dynawo-algorithms
          export DYNAFLOW_LAUNCHER_HOME=$(pwd)
          export DYNAFLOW_LAUNCHER_INSTALL_DIR=$DYNAFLOW_LAUNCHER_HOME/dynaflow-launcher
          scripts/envDFL.sh build-user

      - name: Prepare files for distribution
        run: zip -r DynaFlowLauncher_V${DYNAWO_VERSION}.zip dynaflow-launcher

      - name: Delete previous nightly release
        run: |
          source .github/workflows/tools.sh

          echo "Obtain previous release id and delete it"
          RELEASE_ID=$(eval $CURL_JSON "$GH_API/releases" | python3 -c 'import sys, json; releases=[release["id"] for release in json.load(sys.stdin) if release["tag_name"]=="nightly-release"]; print(releases[0] if releases else "")')
          if [ ! -z "$RELEASE_ID" ]; then
            echo "Release id with tag 'nightly-release' found: $RELEASE_ID"
            echo "Delete release $RELEASE_ID ..."
            curl \
              --request DELETE \
              --url "$GH_API/releases/$RELEASE_ID" \
              --header "authorization: Bearer $GITHUB_TOKEN"
            echo "Wait for release to be deleted ..."
            wait_for_http_code "$GH_API/releases/$RELEASE_ID" 404 $GITHUB_TOKEN
          else
            echo "Previous nightly release not found"
          fi

      - name: INFO. List of all releases after deleting nightly
        run: eval $CURL_JSON "$GH_API/releases"

      - name: Delete previous nightly-release tag
        run: |
          source .github/workflows/tools.sh

          echo "Delete previous tag. Won't fail if it does not exist"
          curl \
            --request DELETE \
            --url "$GH_API/git/refs/tags/nightly-release" \
            --header "authorization: Bearer $GITHUB_TOKEN" \
            --header "Content-Type: application/json"

          echo "Wait for tag to be deleted ..."
          wait_for_http_code "$GH_API/git/refs/tags/nightly-release" 404 $GITHUB_TOKEN

      - name: INFO. Nightly tag should not be found
        run: eval $CURL_JSON "$GH_API/git/refs/tags/nightly-release"

      - name: Get last commit in release branch
        run: |
          echo "Obtaining refs/heads/v${DYNAWO_VERSION_SHORT} ..."
          HEAD_MASTER=$(eval $CURL_JSON "$GH_API/git/refs/heads/v${DYNAWO_VERSION_SHORT}")
          echo "Head v${DYNAWO_VERSION_SHORT}:"
          echo $HEAD_MASTER
          SHA_HEAD_MASTER=$(echo $HEAD_MASTER | python3 -c 'import sys, json; print(json.load(sys.stdin)["object"]["sha"])')
          echo "Last commit in release branch has SHA = $SHA_HEAD_MASTER"
          echo "MASTER_COMMIT_ID=$SHA_HEAD_MASTER" >> $GITHUB_ENV

      - name: INFO. Check last commit in release branch
        run: echo "Last commit in release branch SHA = $MASTER_COMMIT_ID"

      - name: Create tag nightly
        run: |
          source .github/workflows/tools.sh
          echo "Create tag nightly based on last commit in v${DYNAWO_VERSION_SHORT} branch"
          curl \
            --request POST \
            --url "$GH_API/git/refs" \
            --header "authorization: Bearer $GITHUB_TOKEN" \
            --header "Content-Type: application/json" \
            --data '{
                "ref": "refs/tags/nightly-release",
                "sha": "'$MASTER_COMMIT_ID'"
                }'
          echo "Wait for tag to be created ..."
          wait_for_http_code "$GH_API/git/refs/tags/nightly-release" 200 $GITHUB_TOKEN

      - name: INFO. Tag nightly created"
        run: eval $CURL_JSON "$GH_API/git/refs/tags/nightly-release"

      - name: Create release nightly
        run: |
          source .github/workflows/tools.sh
          echo "Create release nightly"
          curl \
            --request POST \
            --url "$GH_API/releases" \
            --header "authorization: Bearer $GITHUB_TOKEN" \
            --header "Content-Type: application/json" \
            --data '{
                "tag_name" : "nightly-release",
                "target_commitish" : "'$MASTER_COMMIT_ID'",
                "name" : "Nightly v'$DYNAWO_VERSION_SHORT'",
                "body" : "Dynawo'"'"'s nightly release. Compiled on *release* settings.\n\n**Don'"'"'t use it for production**",
                "draft" : false,
                "prerelease" : true
                }'
          echo "Wait for the release to be published ..."
          wait_for_http_code "$GH_API/releases/tags/nightly-release" 200 $GITHUB_TOKEN

      - name: INFO. Release object created for tag nightly"
        run: eval $CURL_JSON "$GH_API/releases/tags/nightly-release"

      - name: Upload assets for release
        run: |
          source .github/workflows/tools.sh
          echo "Obtain upload and assets urls from created release:"
          RELEASE=$(eval $CURL_JSON "$GH_API/releases/tags/nightly-release")
          UPLOAD_URL=$(echo ${RELEASE} | python3 -c 'import sys, json; release = json.load(sys.stdin); print(str(release["upload_url"]))' | grep -o ".*assets")
          echo "Release upload URL = $UPLOAD_URL"
          ASSETS_URL=$(echo ${RELEASE} | python3 -c 'import sys, json; release = json.load(sys.stdin); print(str(release["assets_url"]))')
          echo "Release assets URL = $ASSETS_URL"
          echo "ASSETS_URL=$ASSETS_URL" >> $GITHUB_ENV

          echo "Upload asset"
          upload_zip_file $UPLOAD_URL DynaFlowLauncher_V${DYNAWO_VERSION}.zip $GITHUB_TOKEN

      - name: INFO. Release assets
        run: eval $CURL_JSON $ASSETS_URL
